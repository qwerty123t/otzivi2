from decouple import config
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
import httpx
from fastapi.middleware.cors import CORSMiddleware


app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ú–æ–∂–µ—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã (GET, POST, PUT, DELETE –∏ —Ç.–¥.)
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")


@app.get("/", response_class=HTMLResponse)
async def read_index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/send-data/")
async def send_data(form_data: dict):
    bot_token = config('BOT_TOKEN')
    chat_id = config('CHAT_ID')
    api_url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    message = f"""
üì© –í–∞–º –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
<b>–ò–º—è:</b> {form_data['firstName']}
<b>–§–∞–º–∏–ª–∏—è:</b> {form_data['lastName']}
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {form_data['birthDate']}
<b>–ü–æ–ª:</b> {'–ú—É–∂—Å–∫–æ–π' if form_data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}
<b>–•–æ–±–±–∏:</b> {', '.join(form_data['hobbies'])}
<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {form_data.get('notes', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
    """

    params = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(api_url, json=params)
        return {"ok": response.status_code == 200}
